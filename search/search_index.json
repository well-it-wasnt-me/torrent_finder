{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"torrent_finder documentation \u00b6 torrent_finder automates the hunt for the \"best\" torrent by pulling results from a Torznab/Jackett endpoint, ranking the candidates, and handing the winner directly to Transmission. The project favors simple configuration, readable logging, and a workflow that you can script or invoke ad-hoc. Key capabilities \u00b6 Query Torznab/Jackett feeds and score candidates by seeders and leechers. Apply defaults from config.json but allow one-off CLI overrides. Dispatch the chosen magnet to Transmission via RPC or transmission-remote . Command-line pit stop \u00b6 python main.py \"The Big Lebowski\" \\ --config config.json \\ --start \\ --categories \"2000,5000\" What you'll find here \u00b6 A quick path to installation and verification. Guidance on shaping config.json for Torznab, Transmission, Telegram, and logging. Usage patterns for the CLI and Telegram bot, plus an API overview for extending the toolkit. Use the navigation links to jump into setup, usage, configuration, or the API reference. Run the site locally with mkdocs serve .","title":"Home"},{"location":"#torrent_finder-documentation","text":"torrent_finder automates the hunt for the \"best\" torrent by pulling results from a Torznab/Jackett endpoint, ranking the candidates, and handing the winner directly to Transmission. The project favors simple configuration, readable logging, and a workflow that you can script or invoke ad-hoc.","title":"torrent_finder documentation"},{"location":"#key-capabilities","text":"Query Torznab/Jackett feeds and score candidates by seeders and leechers. Apply defaults from config.json but allow one-off CLI overrides. Dispatch the chosen magnet to Transmission via RPC or transmission-remote .","title":"Key capabilities"},{"location":"#command-line-pit-stop","text":"python main.py \"The Big Lebowski\" \\ --config config.json \\ --start \\ --categories \"2000,5000\"","title":"Command-line pit stop"},{"location":"#what-youll-find-here","text":"A quick path to installation and verification. Guidance on shaping config.json for Torznab, Transmission, Telegram, and logging. Usage patterns for the CLI and Telegram bot, plus an API overview for extending the toolkit. Use the navigation links to jump into setup, usage, configuration, or the API reference. Run the site locally with mkdocs serve .","title":"What you'll find here"},{"location":"api/","text":"API Overview \u00b6 The Python modules ship with docstrings and type hints so you can script your own workflows. Highlighted entry points: torrent_finder.config \u2013 loads and validates config.json , exposes dataclasses for Torznab, Transmission, Telegram, and logging. torrent_finder.torznab \u2013 lightweight Torznab client that wraps Jackett and produces Candidate objects. torrent_finder.finder \u2013 orchestration logic that ranks candidates and selects the best torrent. torrent_finder.models \u2013 dataclasses ( Candidate ) and helper methods used during ranking. torrent_finder.transmission \u2013 wrapper around Transmission RPC or transmission-remote for adding magnets and verifying availability. main.py \u2013 CLI glue code that wires everything together and applies command-line overrides. telegram_bot.py \u2013 chat controller built with python-telegram-bot that surfaces search/download to Telegram. Import these modules directly in your own scripts, or use them as reference when extending the CLI. All public classes and functions are annotated, so IDEs and pydoc will surface the same information that Sphinx previously generated.","title":"API"},{"location":"api/#api-overview","text":"The Python modules ship with docstrings and type hints so you can script your own workflows. Highlighted entry points: torrent_finder.config \u2013 loads and validates config.json , exposes dataclasses for Torznab, Transmission, Telegram, and logging. torrent_finder.torznab \u2013 lightweight Torznab client that wraps Jackett and produces Candidate objects. torrent_finder.finder \u2013 orchestration logic that ranks candidates and selects the best torrent. torrent_finder.models \u2013 dataclasses ( Candidate ) and helper methods used during ranking. torrent_finder.transmission \u2013 wrapper around Transmission RPC or transmission-remote for adding magnets and verifying availability. main.py \u2013 CLI glue code that wires everything together and applies command-line overrides. telegram_bot.py \u2013 chat controller built with python-telegram-bot that surfaces search/download to Telegram. Import these modules directly in your own scripts, or use them as reference when extending the CLI. All public classes and functions are annotated, so IDEs and pydoc will surface the same information that Sphinx previously generated.","title":"API Overview"},{"location":"configuration/","text":"Configuration \u00b6 The application reads a single JSON document ( config.json by default) that controls Torznab queries, Transmission interaction, Telegram access, and log verbosity. Start from the sample file that ships in the repository, then adjust the sections described below. Example layout \u00b6 { \"torznab\": { \"url\": \"http://localhost:9117/jackett/torznab/all\", \"apikey\": \"CHANGE_ME\", \"categories\": \"2000\" }, \"transmission\": { \"download_dir\": \"/path/to/save\", \"start\": false, \"use_rpc\": true, \"host\": \"localhost\", \"port\": 9091, \"username\": \"transmission\", \"password\": \"transmission\" }, \"logging\": { \"level\": \"INFO\" }, \"telegram\": { \"bot_token\": \"123456:ABC\", \"chat_id\": \"123456789\" } } Torznab section \u00b6 url : Base Torznab/Jackett endpoint (required). apikey : API key for the feed (required). categories : optional comma-separated category identifiers to filter search results. user_agent : custom HTTP User-Agent string. Defaults to Mozilla/5.0 (compatible; MagnetFinder/torznab-only 1.0) . request_timeout : timeout in seconds for Torznab requests (float, default 12.0 ). sleep_between_requests : delay in seconds between requests to avoid hammering the indexer (float, default 0.6 ). Transmission section \u00b6 download_dir : destination directory for completed or in-progress downloads (required). start : whether torrents should start immediately after being added (default false ). use_rpc : set to true to use the Transmission RPC interface; false switches to the transmission-remote CLI. host , port : where Transmission is reachable. Defaults to localhost / 9091 . username , password : RPC credentials when use_rpc is enabled. Leave null to connect without authentication. auth : user:pass credentials for the transmission-remote CLI. Logging section \u00b6 level : one of DEBUG , INFO , WARNING , ERROR . Defaults to INFO . Use --debug on the CLI to override temporarily. Telegram section \u00b6 bot_token : Telegram bot token obtained from BotFather. Required when this section is present and enables the chat controller. chat_id : optional numeric chat ID. When provided, only that chat (or channel) may send commands to the bot. Leave it empty to accept messages from any chat that knows the bot\u2019s username. Applying overrides \u00b6 Every command-line flag documented in Usage maps to a configuration key. CLI overrides are applied after config.json is loaded, letting you script temporary tweaks without editing the JSON file.","title":"Configuration"},{"location":"configuration/#configuration","text":"The application reads a single JSON document ( config.json by default) that controls Torznab queries, Transmission interaction, Telegram access, and log verbosity. Start from the sample file that ships in the repository, then adjust the sections described below.","title":"Configuration"},{"location":"configuration/#example-layout","text":"{ \"torznab\": { \"url\": \"http://localhost:9117/jackett/torznab/all\", \"apikey\": \"CHANGE_ME\", \"categories\": \"2000\" }, \"transmission\": { \"download_dir\": \"/path/to/save\", \"start\": false, \"use_rpc\": true, \"host\": \"localhost\", \"port\": 9091, \"username\": \"transmission\", \"password\": \"transmission\" }, \"logging\": { \"level\": \"INFO\" }, \"telegram\": { \"bot_token\": \"123456:ABC\", \"chat_id\": \"123456789\" } }","title":"Example layout"},{"location":"configuration/#torznab-section","text":"url : Base Torznab/Jackett endpoint (required). apikey : API key for the feed (required). categories : optional comma-separated category identifiers to filter search results. user_agent : custom HTTP User-Agent string. Defaults to Mozilla/5.0 (compatible; MagnetFinder/torznab-only 1.0) . request_timeout : timeout in seconds for Torznab requests (float, default 12.0 ). sleep_between_requests : delay in seconds between requests to avoid hammering the indexer (float, default 0.6 ).","title":"Torznab section"},{"location":"configuration/#transmission-section","text":"download_dir : destination directory for completed or in-progress downloads (required). start : whether torrents should start immediately after being added (default false ). use_rpc : set to true to use the Transmission RPC interface; false switches to the transmission-remote CLI. host , port : where Transmission is reachable. Defaults to localhost / 9091 . username , password : RPC credentials when use_rpc is enabled. Leave null to connect without authentication. auth : user:pass credentials for the transmission-remote CLI.","title":"Transmission section"},{"location":"configuration/#logging-section","text":"level : one of DEBUG , INFO , WARNING , ERROR . Defaults to INFO . Use --debug on the CLI to override temporarily.","title":"Logging section"},{"location":"configuration/#telegram-section","text":"bot_token : Telegram bot token obtained from BotFather. Required when this section is present and enables the chat controller. chat_id : optional numeric chat ID. When provided, only that chat (or channel) may send commands to the bot. Leave it empty to accept messages from any chat that knows the bot\u2019s username.","title":"Telegram section"},{"location":"configuration/#applying-overrides","text":"Every command-line flag documented in Usage maps to a configuration key. CLI overrides are applied after config.json is loaded, letting you script temporary tweaks without editing the JSON file.","title":"Applying overrides"},{"location":"getting_started/","text":"Getting Started \u00b6 This project targets Python 3.10+ and assumes you have a Torznab/Jackett instance as well as Transmission available somewhere on your network. Follow the steps below to prep the repo for use or further hacking. Prerequisites \u00b6 Python 3.10 or newer Access to a Torznab/Jackett feed with a valid API key Transmission installed locally or reachable over the network (RPC or transmission-remote ) Create an isolated environment \u00b6 python3 -m venv .venv source .venv/bin/activate Install dependencies \u00b6 pip install --upgrade pip pip install -r requirements.txt Set up configuration \u00b6 Start from the sample file, then see Configuration for every available option. cp config.example.json config.json Bootstrap Jackett + FlareSolverr \u00b6 Need a Jackett + FlareSolverr pair without the clickfest? Use the bundled helper: python scripts/setup_indexing_stack.py It will: detect existing instances before touching anything, optionally write a Docker Compose stack under ~/.local/share/torrent_finder/stack and spin up linuxserver/jackett + ghcr.io/flaresolverr, link Jackett to FlareSolverr, configure a curated list of public trackers, and grab the Torznab API key, update config.json whenever torznab.url / torznab.apikey are still on placeholder values. Pass --help to the script for more knobs (custom tracker list, ports, or skipping Docker entirely when you manage the services yourself). Verify the installation \u00b6 Run the unit tests to confirm the environment is wired correctly. pytest From here you are ready to explore Usage or build out your own automation on top of the API.","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"This project targets Python 3.10+ and assumes you have a Torznab/Jackett instance as well as Transmission available somewhere on your network. Follow the steps below to prep the repo for use or further hacking.","title":"Getting Started"},{"location":"getting_started/#prerequisites","text":"Python 3.10 or newer Access to a Torznab/Jackett feed with a valid API key Transmission installed locally or reachable over the network (RPC or transmission-remote )","title":"Prerequisites"},{"location":"getting_started/#create-an-isolated-environment","text":"python3 -m venv .venv source .venv/bin/activate","title":"Create an isolated environment"},{"location":"getting_started/#install-dependencies","text":"pip install --upgrade pip pip install -r requirements.txt","title":"Install dependencies"},{"location":"getting_started/#set-up-configuration","text":"Start from the sample file, then see Configuration for every available option. cp config.example.json config.json","title":"Set up configuration"},{"location":"getting_started/#bootstrap-jackett-flaresolverr","text":"Need a Jackett + FlareSolverr pair without the clickfest? Use the bundled helper: python scripts/setup_indexing_stack.py It will: detect existing instances before touching anything, optionally write a Docker Compose stack under ~/.local/share/torrent_finder/stack and spin up linuxserver/jackett + ghcr.io/flaresolverr, link Jackett to FlareSolverr, configure a curated list of public trackers, and grab the Torznab API key, update config.json whenever torznab.url / torznab.apikey are still on placeholder values. Pass --help to the script for more knobs (custom tracker list, ports, or skipping Docker entirely when you manage the services yourself).","title":"Bootstrap Jackett + FlareSolverr"},{"location":"getting_started/#verify-the-installation","text":"Run the unit tests to confirm the environment is wired correctly. pytest From here you are ready to explore Usage or build out your own automation on top of the API.","title":"Verify the installation"},{"location":"usage/","text":"Usage \u00b6 The CLI glues together configuration loading, Torznab searching, and Transmission handoff. You only need to supply a title, but most configuration fields can be overridden per invocation. Basic search \u00b6 python main.py \"Drunken Master\" The command above loads config.json from the project root, queries the configured Torznab feed, logs the ranked candidates, and sends the top magnet to Transmission using the defaults defined in the configuration file. Command-line options \u00b6 title : required positional argument that specifies the search phrase sent to Torznab. --config PATH : alternate path to the JSON configuration file (defaults to config.json ). --download-dir DIR : temporary download directory that overrides the Transmission download_dir setting. --start / --no-start : force the torrent to start immediately or be added in a paused state. --use-rpc / --use-remote : switch between Transmission's RPC interface and the transmission-remote CLI regardless of what the configuration specifies. --host, --port : override the Transmission host and port when connecting over RPC or transmission-remote . --username, --password : credentials for Transmission RPC mode. --auth : user:pass combination for the transmission-remote CLI. --categories : replace the Torznab category filter for this run (comma-separated list). --debug : elevate logging to DEBUG regardless of the configuration. Workflow tips \u00b6 Use the overrides to script batch downloads without touching config.json . Pair --debug with a temporary --download-dir when diagnosing indexer or Transmission issues. If transmission-remote is not found, toggle RPC mode with --use-rpc (requires transmission-rpc to be installed in the active environment). Telegram chat control \u00b6 A lightweight Telegram bot ships with the project for couch-friendly control: python telegram_bot.py --config config.json Flow: Send search Cowboy Bepop (or any search <keywords> query). The bot replies with the top five ranked results and seed/peer stats. Respond with the list number to add that torrent to Transmission. Populate the telegram section of config.json with your bot_token (and optional chat_id ) or override with --token / --chat-id . Tweak --max-results when you want more or fewer options. The bot shares the same config.json as the CLI, so keep your Torznab/Transmission settings up to date there.","title":"Usage"},{"location":"usage/#usage","text":"The CLI glues together configuration loading, Torznab searching, and Transmission handoff. You only need to supply a title, but most configuration fields can be overridden per invocation.","title":"Usage"},{"location":"usage/#basic-search","text":"python main.py \"Drunken Master\" The command above loads config.json from the project root, queries the configured Torznab feed, logs the ranked candidates, and sends the top magnet to Transmission using the defaults defined in the configuration file.","title":"Basic search"},{"location":"usage/#command-line-options","text":"title : required positional argument that specifies the search phrase sent to Torznab. --config PATH : alternate path to the JSON configuration file (defaults to config.json ). --download-dir DIR : temporary download directory that overrides the Transmission download_dir setting. --start / --no-start : force the torrent to start immediately or be added in a paused state. --use-rpc / --use-remote : switch between Transmission's RPC interface and the transmission-remote CLI regardless of what the configuration specifies. --host, --port : override the Transmission host and port when connecting over RPC or transmission-remote . --username, --password : credentials for Transmission RPC mode. --auth : user:pass combination for the transmission-remote CLI. --categories : replace the Torznab category filter for this run (comma-separated list). --debug : elevate logging to DEBUG regardless of the configuration.","title":"Command-line options"},{"location":"usage/#workflow-tips","text":"Use the overrides to script batch downloads without touching config.json . Pair --debug with a temporary --download-dir when diagnosing indexer or Transmission issues. If transmission-remote is not found, toggle RPC mode with --use-rpc (requires transmission-rpc to be installed in the active environment).","title":"Workflow tips"},{"location":"usage/#telegram-chat-control","text":"A lightweight Telegram bot ships with the project for couch-friendly control: python telegram_bot.py --config config.json Flow: Send search Cowboy Bepop (or any search <keywords> query). The bot replies with the top five ranked results and seed/peer stats. Respond with the list number to add that torrent to Transmission. Populate the telegram section of config.json with your bot_token (and optional chat_id ) or override with --token / --chat-id . Tweak --max-results when you want more or fewer options. The bot shares the same config.json as the CLI, so keep your Torznab/Transmission settings up to date there.","title":"Telegram chat control"}]}